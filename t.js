// Generated by CoffeeScript 1.3.2
(function() {
  var Game, M, P, PI, PJ, PL, PO, PS, PT, PZ, R, height, pieces, r, sz, txt, width,
    __defineProperty = function(clazz, key, value) {
  if (typeof clazz.__defineProperty == 'function') return clazz.__defineProperty(key, value);
  return clazz.prototype[key] = value;
},
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends =   function(child, parent) {
    if (typeof parent.__extend == 'function') return parent.__extend(child);
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } 
    function ctor() { this.constructor = child; } 
    ctor.prototype = parent.prototype; 
    child.prototype = new ctor; 
    child.__super__ = parent.prototype; 
    if (typeof parent.extended == 'function') parent.extended(child); 
    return child; 
};

  width = 10;

  height = 15;

  sz = 30;

  if (typeof Raphael !== "undefined" && Raphael !== null) {
    R = Raphael;
  }

  M = Math;

  txt = null;

  P = (function() {

    function P() {
      this.remove = __bind(this.remove, this);

      this.bounds = __bind(this.bounds, this);

      this.clone = __bind(this.clone, this);

      this.down = __bind(this.down, this);

      this.r = __bind(this.r, this);

      this.l = __bind(this.l, this);

      this.draw = __bind(this.draw, this);

      this.rotR = __bind(this.rotR, this);
      this.shape = this.bshape;
      this.blocks = [];
      this.xb = 0;
      this.yb = 0;
    }

    __defineProperty(P,  "rotR", function() {
      var col, n, r, row, _i, _j, _ref, _ref1;
      n = [];
      for (row = _i = 0, _ref = this.shape[0].length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; row = 0 <= _ref ? ++_i : --_i) {
        r = [];
        for (col = _j = 0, _ref1 = this.shape.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          r.push(this.shape[this.shape.length - col - 1][row]);
        }
        n.push(r);
      }
      this.shape = n;
      return this;
    });

    __defineProperty(P,  "draw", function(c) {
      var b, col, row, x, y, _i, _len, _ref, _ref1, _results;
      this.xb = M.max(0, this.xb);
      this.xb = M.min(width - this.shape[0].length, this.xb);
      _ref = this.blocks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        b.remove();
      }
      _ref1 = this.shape;
      _results = [];
      for (y in _ref1) {
        row = _ref1[y];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (x in row) {
            col = row[x];
            if (col === 1) {
              x = 1.0 * x;
              y = 1.0 * y;
              b = c.rect((this.xb + x) * sz, (+this.yb + y) * sz, sz, sz);
              b.attr({
                "fill": this.color,
                "stroke": "#000"
              });
              _results1.push(this.blocks.push(b));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    });

    __defineProperty(P,  "l", function() {
      this.xb -= 1;
      return this;
    });

    __defineProperty(P,  "r", function() {
      this.xb += 1;
      return this;
    });

    __defineProperty(P,  "down", function() {
      this.yb += 1;
      return this;
    });

    __defineProperty(P,  "clone", function() {
      var p;
      p = new this.constructor();
      p.xb = this.xb;
      p.yb = this.yb;
      p.shape = this.shape;
      return p;
    });

    __defineProperty(P,  "bounds", function() {
      var ba, col, row, x, y, _ref;
      ba = [];
      _ref = this.shape;
      for (y in _ref) {
        row = _ref[y];
        for (x in row) {
          col = row[x];
          if (col === 1) {
            ba.push([x * 1.0 + this.xb, y * 1.0 + this.yb]);
          }
        }
      }
      return ba;
    });

    __defineProperty(P,  "remove", function() {
      var b, _i, _len, _ref, _results;
      _ref = this.blocks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        _results.push(b.remove());
      }
      return _results;
    });

    return P;

  })();

  PI = (function(_super) {

    function PI() {
      return PI.__super__.constructor.apply(this, arguments);
    }

    PI = __extends(PI, _super);

    __defineProperty(PI,  "bshape", [[1, 1, 1, 1]]);

    __defineProperty(PI,  "color", 'cyan');

    return PI;

  })(P);

  PJ = (function(_super) {

    function PJ() {
      return PJ.__super__.constructor.apply(this, arguments);
    }

    PJ = __extends(PJ, _super);

    __defineProperty(PJ,  "bshape", [[1, 1, 1], [0, 0, 1]]);

    __defineProperty(PJ,  "color", 'blue');

    return PJ;

  })(P);

  PL = (function(_super) {

    function PL() {
      return PL.__super__.constructor.apply(this, arguments);
    }

    PL = __extends(PL, _super);

    __defineProperty(PL,  "bshape", [[1, 1, 1], [1, 0, 0]]);

    __defineProperty(PL,  "color", 'orange');

    return PL;

  })(P);

  PO = (function(_super) {

    function PO() {
      return PO.__super__.constructor.apply(this, arguments);
    }

    PO = __extends(PO, _super);

    __defineProperty(PO,  "bshape", [[1, 1], [1, 1]]);

    __defineProperty(PO,  "color", 'yellow');

    return PO;

  })(P);

  PS = (function(_super) {

    function PS() {
      return PS.__super__.constructor.apply(this, arguments);
    }

    PS = __extends(PS, _super);

    __defineProperty(PS,  "bshape", [[0, 1, 1], [1, 1, 0]]);

    __defineProperty(PS,  "color", 'green');

    return PS;

  })(P);

  PZ = (function(_super) {

    function PZ() {
      return PZ.__super__.constructor.apply(this, arguments);
    }

    PZ = __extends(PZ, _super);

    __defineProperty(PZ,  "bshape", [[1, 1, 0], [0, 1, 1]]);

    __defineProperty(PZ,  "color", 'purple');

    return PZ;

  })(P);

  PT = (function(_super) {

    function PT() {
      return PT.__super__.constructor.apply(this, arguments);
    }

    PT = __extends(PT, _super);

    __defineProperty(PT,  "bshape", [[0, 1, 0], [1, 1, 1]]);

    __defineProperty(PT,  "color", 'red');

    return PT;

  })(P);

  pieces = [PI, PT, PO, PJ, PL, PS, PZ];

  Game = (function() {

    function Game(G, N, S) {
      this.G = G;
      this.N = N;
      this.S = S;
      this.run = __bind(this.run, this);

      this.toggle = __bind(this.toggle, this);

      this.draw = __bind(this.draw, this);

      this.gameover = __bind(this.gameover, this);

      this.gS = __bind(this.gS, this);

      this.persist = __bind(this.persist, this);

      this.rotL = __bind(this.rotL, this);

      this.rotR = __bind(this.rotR, this);

      this.r = __bind(this.r, this);

      this.l = __bind(this.l, this);

      this.drop = __bind(this.drop, this);

      this.tick = __bind(this.tick, this);

      this.check = __bind(this.check, this);

      this.init = __bind(this.init, this);

      if (this.G) {
        this.G = R(this.G.attr("id"));
        this.N = R(this.N.attr("id"));
      }
      this.init();
      if (this.G) {
        this.tick();
        this.toggle();
      }
    }

    __defineProperty(Game,  "init", function() {
      var b, col, r, s, _i, _j, _k, _len, _ref, _ref1, _ref2;
      this.n = -1;
      s = Math.random();
      this.L = [s];
      if (this.blocks) {
        _ref = this.blocks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          b = _ref[_i];
          b.remove();
        }
      }
      this.score = 0;
      this.blocks = [];
      if (this.p) {
        this.p.remove();
      }
      this.p = null;
      if (this.next) {
        this.next.remove();
      }
      this.next = null;
      this.m = [];
      for (r = _j = 0, _ref1 = height - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; r = 0 <= _ref1 ? ++_j : --_j) {
        this.m[r] = [];
        for (col = _k = 0, _ref2 = width - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; col = 0 <= _ref2 ? ++_k : --_k) {
          this.m[r][col] = null;
        }
      }
      if (this.G) {
        this.Q = new Nonsense(s);
        this.tick();
        this.draw();
        return this.gS();
      }
    });

    __defineProperty(Game,  "check", function(p) {
      var b, _i, _len, _ref;
      _ref = p.bounds();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        if (b[1] >= height) {
          return false;
        }
        if (this.m[b[1]][b[0]] != null) {
          return false;
        }
      }
      return true;
    });

    __defineProperty(Game,  "tick", function() {
      if (this.p != null) {
        if (this.check(this.p.clone().down())) {
          this.p.down();
        } else {
          this.persist(this.p.bounds(), this.p.color);
          this.L.push([this.p.xb, this.p.yb]);
          this.p.remove();
          this.draw();
          this.p = null;
        }
      }
      if (!(this.p != null)) {
        this.p = this.next;
        if (this.p != null) {
          if (!this.check(this.p)) {
            return this.gameover();
          }
          this.L.push(this.n);
        }
        this.n = this.Q.uint32() % pieces.length;
        this.next = new pieces[this.n]();
      }
      if (this.p != null) {
        this.p.draw(this.G);
      }
      return this.next.draw(this.N);
    });

    __defineProperty(Game,  "drop", function() {
      var _results;
      if (this.i != null) {
        this.tick();
        _results = [];
        while (this.p.yb !== 0) {
          _results.push(this.tick());
        }
        return _results;
      }
    });

    __defineProperty(Game,  "l", function() {
      if (this.check(this.p.clone().l())) {
        this.p.l();
        return this.p.draw(this.G);
      }
    });

    __defineProperty(Game,  "r", function() {
      if (this.check(this.p.clone().r())) {
        this.p.r();
        return this.p.draw(this.G);
      }
    });

    __defineProperty(Game,  "rotR", function() {
      if (this.check(this.p.clone().rotR())) {
        this.p.rotR();
        this.p.draw(this.G);
        return this.L.push('R');
      }
    });

    __defineProperty(Game,  "rotL", function() {
      var _i, _results;
      _results = [];
      for (_i = 1; _i <= 3; _i++) {
        _results.push(this.rotR());
      }
      return _results;
    });

    __defineProperty(Game,  "persist", function(b, c) {
      var coord, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = b.length; _i < _len; _i++) {
        coord = b[_i];
        _results.push(this.m[coord[1]][coord[0]] = c);
      }
      return _results;
    });

    __defineProperty(Game,  "gS", function() {
      return $.get('/H', function(d) {
        return $("#h").text(d);
      });
    });

    __defineProperty(Game,  "gameover", function() {
      var _this = this;
      this.toggle();
      $.post('/h', {
        n: $.trim(prompt("Name?")),
        d: JSON.stringify(this.L)
      }).done(function() {
        return _this.gS();
      });
      txt = this.G.text(0.5 * width * sz, 2 * sz, this.score + "\ngame over\nhit ⏎");
      txt.attr({
        "font-size": "30pt",
        "font-family": "Courier"
      });
      return this.init();
    });

    __defineProperty(Game,  "draw", function() {
      var b, col, full, i, row, rowsKilled, x, y, _i, _j, _len, _ref, _ref1, _ref2, _results;
      rowsKilled = 0;
      _ref = this.m;
      for (y in _ref) {
        row = _ref[y];
        full = true;
        for (x in row) {
          col = row[x];
          if (!(col != null)) {
            full = false;
          }
        }
        if (full) {
          rowsKilled += 1;
          this.m.splice(y, 1);
          this.m.unshift([]);
          for (i = _i = 1; 1 <= width ? _i <= width : _i >= width; i = 1 <= width ? ++_i : --_i) {
            this.m[0].push(null);
          }
        }
      }
      if (rowsKilled > 0) {
        this.score += M.pow(2, rowsKilled - 1) * 1000;
      }
      if (this.G) {
        _ref1 = this.blocks;
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          b = _ref1[_j];
          b.remove();
        }
        this.S.html(this.score);
        _ref2 = this.m;
        _results = [];
        for (y in _ref2) {
          row = _ref2[y];
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (x in row) {
              col = row[x];
              if (col != null) {
                b = this.G.rect((x * 1.0) * sz, (y * 1.0) * sz, sz, sz);
                b.attr("fill", col);
                b.attr("stroke", "#000");
                _results1.push(this.blocks.push(b));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    });

    __defineProperty(Game,  "toggle", function() {
      if (this.i != null) {
        clearInterval(this.i);
        this.i = null;
      } else {
        this.i = setInterval(this.tick, 1000);
      }
      if (txt != null) {
        txt.remove();
        return txt = null;
      }
    });

    __defineProperty(Game,  "run", function(h) {
      var a, i, n, p, _i, _len;
      p = 0;
      a = JSON.parse(h["d"]);
      n = require('./js/n.js');
      this.Q = new n(a.shift());
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        i = a[_i];
        if (i[1] != null) {
          p.xb = i[0];
          p.yb = i[1];
          this.persist(p.bounds(), p.color);
          this.draw();
        } else if (i === "R") {
          p.rotR();
        } else {
          i = this.Q.uint32() % pieces.length;
          p = new pieces[i]();
        }
      }
      return this.score;
    });

    return Game;

  })();

  r = typeof exports !== "undefined" && exports !== null ? exports : this;

  r.Game = Game;

}).call(this);
